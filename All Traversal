#include <bits/stdc++.h> 
/************************************************************

    Following is the Binary Tree node structure:

    class BinaryTreeNode
    {
    public :
        T data;
        BinaryTreeNode<T> *left;
        BinaryTreeNode<T> *right;

        BinaryTreeNode(T data) {
            this -> data = data;
            left = NULL;
            right = NULL;
        }
    };


************************************************************/

/*
    ()[1]
    /\
[2]() ()[3]

  1:- preOrder
  2:- in Order
  3:- post Order

  in stack push {root, 1};

  if(num == 1){
      pre.push_back();
      st.push(2);
      if(left exists)
        st.push({left, 1});
  }

  else if(num == 2){
      in.push_back();
      st.push(3);
      if(right exists)
        st.push({right, 1});
  }
  else{
      post.push_back();
  }
*/

vector<vector<int>> getTreeTraversal(BinaryTreeNode<int> *root){
    vector<vector<int>> ans;
    if(root == NULL) return ans;

    vector<int> pre, _in, post;

    stack<pair<BinaryTreeNode<int>*, int>> st;
    st.push({root, 1});

    while(!st.empty()){
        pair<BinaryTreeNode<int>*, int> p = st.top();
        st.pop();

        if(p.second == 1){
            pre.push_back(p.first->data);
            st.push({p.first, p.second + 1});

            if(p.first->left != NULL){
                st.push({p.first->left, 1});
            }
        }
        else if(p.second == 2){
            _in.push_back(p.first->data);
            st.push({p.first, p.second + 1});

            if(p.first->right != NULL){
                st.push({p.first->right, 1});
            }
        }
        else{
            post.push_back(p.first->data);
        }
    }
 
     ans.push_back(_in); 
     ans.push_back(pre); 
     ans.push_back(post);

    return ans;
}
