O(1) solution
======================================================
#include <bits/stdc++.h> 
long long fact(int n){
	long long f = 1;
	for(long long i=1; i<=n; i++) f *= i;
	return f;
}

int uniquePaths(int m, int n) {
	int res = fact(m + n - 2) / (fact(m - 1) * fact(n - 1));
	return res; 
}

/*
	from start to end we have to move (m + n - 2) steps in which (n-1) downward steps and
	(m-1) steps forward we have to take.. 

	So Our answer would simply be (m+n-2)choose(m-1);
*/

=========================================================
O(n+m) solution
---------------------------------------------------------
#include <bits/stdc++.h> 

int uniquePaths(int m, int n) {
	vector<vector<int>> dp(m + 1, vector<int> (n + 1));

	for(int i=0; i<m; i++){
		for(int j=0; j<n; j++){
			if(i == 0 || j == 0)
				dp[i][j] = 1;
			else
				dp[i][j] = dp[i-1][j] + dp[i][j-1];
		}
	}
	return dp[m-1][n-1];
}
===========================================================
