#include<bits/stdc++.h>
using namespace std;
void solve(int ind, vector<int> &temp, vector<vector<int>> &ans, vector<int> &arr, int target){
	if(target == 0){
		ans.push_back(temp);
		return;
	}

	for (int i = ind; i < arr.size(); i++) {
		if(i != ind && arr[i] == arr[i - 1]) continue;
		if(target < arr[i]) break;
		temp.push_back(arr[i]);
		solve(i + 1, temp, ans, arr, target - arr[i]);
		temp.pop_back();
	}
}

vector<vector<int>> combinationSum2(vector<int> &arr, int n, int target){
	sort(arr.begin(), arr.end());
	vector<vector<int>> ans;
	vector<int> temp;
	solve(0, temp, ans, arr, target);
	return ans;
}


// One more way where at the base we check if the current combination is already present or not
// there we follow if(target - arr[ind] >= 0) :- pick 

// this gives best complexity : O(2^n * k)
// space : O(x * k) :- k - number of combination
