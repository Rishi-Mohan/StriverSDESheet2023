bool dfs(int node, int color, vector<int> &col, vector<vector<int>> &adj){
	col[node] = color;
	for(auto it : adj[node]){
		if(col[it] == -1){
			if(dfs(it, 1-color, col, adj) == 0) 
				return 0;
		}else{
			if(col[node] == col[it]){
				return 0;
			}
		}
	}
	return 1;
}
bool isGraphBirpatite(vector<vector<int>> &edges) {
	int n = edges.size();
	vector<int> col(n, -1);
	vector<vector<int>> adj(n);

	for(int i=0; i<n; i++){
		for(int j=0; j<n; j++){
			if(edges[i][j] == 1){
				adj[i].push_back(j);
				adj[j].push_back(i);
			}
		}
	}

	for(int i=0; i<n; i++){
		if(col[i] == -1){
			if(dfs(i, 1, col, adj) == 0) 
				return 0;
		}
	}
	return 1;
}
