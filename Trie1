/*
    Your Trie object will be instantiated and called as such:
    Trie* obj = new Trie();
    obj->insert(word);
    bool check2 = obj->search(word);
    bool check3 = obj->startsWith(prefix);
 */
struct Node{
    Node *links[26];
    bool flag;

    bool containKey(char ch) { 
        return (links[ch - 'a'] != NULL); 
    }
    void put(char ch, Node *node){
        links[ch-'a'] = node;
    }

    Node *get(char ch){
        return links[ch-'a'];
    }

    void setEnd(){
        flag = 1;
    }

    bool getEnd(){
        return flag;
    }

};

class Trie {
private:
    Node *root;
public:

    /** Initialize your data structure here. */
    Trie() {
        root = new Node();
    }

    /** Inserts a word into the trie. */
    void insert(string word) {
        Node *node = root;
        for(auto ch: word){
            if(!node->containKey(ch))
                node->put(ch, new Node());
            node = node->get(ch);
        }
        node->setEnd();
    }

    /** Returns if the word is in the trie. */
    bool search(string word) {
        Node *node = root;
        for(auto ch: word){
            if(!node->containKey(ch))
                return 0;
            node = node->get(ch);
        }
        return node->getEnd();
    }

    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        Node *node = root;
        for(auto ch: prefix){
            if(!node->containKey(ch))
                return 0;
            node = node->get(ch);
        }
        return 1;
    }
};
