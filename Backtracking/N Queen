class Solution {
public:
    bool isSafe(int row, int col, vector<string> &board, int n){
        // checking left upward diagonal
        int r = row, c = col;
        while(r>=0 && c >=0){
            if (board[r--][c--] == 'Q')
                return 0; 
        }

        // // checking left horizontal
        r = row; c = col;
        while(c >= 0)
            if (board[r][c--] == 'Q') 
                return 0;

        // // checking left downward diagonal
        r = row; c = col;
        while(r < n && c >= 0){
            if(board[r][c] == 'Q')
                return 0;
            r += 1;
            c -= 1;
        }

        return 1;
    }
    void solve(int col, int n, vector<string> board, vector<vector<string>> &ans){
        if(col == n){
            ans.push_back(board);
            return;
        }

        for(int row = 0; row < n; row++){
            if(isSafe(row, col, board, n)){
                board[row][col] = 'Q';
                solve(col + 1, n, board, ans);
                board[row][col] = '.';
            }
        }
    }
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> ans;
        vector<string> board(n);
        string s(n, '.');
        for(int i=0; i<n; i++)
            board[i] = s;
        solve(0, n, board, ans);
        return ans;
    }
};
