#include <bits/stdc++.h>
using namespace std;

struct DSU{
    int n;
    vector<int> par, sz;
    void init(int _n){
        n = _n;
        par.resize(_n);
        sz.resize(_n);
        iota(par.begin(), par.end(), 0);
    }

    int getPar(int u){
        if(u == par[u])
            return u;
        return par[u] = getPar(par[u]);
    }

    void unite(int u, int v){
        int a = getPar(u);
        int b = getPar(v);

        // a should be smaller in size
        if(sz[a] > sz[b]) 
            swap(a, b);
        
        sz[b] += sz[a];
        sz[a] = 0;
        par[a] = b; 
    }
};
string cycleDetection (vector<vector<int>>& edges, int n, int m)
{
    DSU d;
    d.init(n + 1);

    for(auto i : edges){
        if(d.getPar(i[0]) == d.getPar(i[1]))
            return "Yes";
        d.unite(i[0], i[1]);
    }
    return "No";
}

