#include <bits/stdc++.h>

bool isPall(string &s, int l, int r){
    while(l < r){
        if(s[l] != s[r])
            return 0;
        l += 1; r -= 1;
    }
    return 1;
}

void solve(int ind, vector<string> &temp, vector<vector<string>> &ans, string &s){
    if(ind == s.size()){
        ans.push_back(temp);
        return;
    }

    for(int i=ind; i<s.size(); i++){
        // we partition only if partition is pallindrome otherwise continue;
        if(isPall(s, ind, i)){
            temp.push_back(s.substr(ind, i - ind + 1));
            solve(i + 1, temp, ans, s);
            temp.pop_back();
        }
    }
}

vector<vector<string>> partition(string &s) 
{
    vector<vector<string>> ans;
    vector<string> temp;

    solve(0, temp, ans, s);

    return ans;

}
